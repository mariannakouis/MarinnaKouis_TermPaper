# -*- coding: utf-8 -*-
"""Copy of esg_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kq4Hop6eLdi-01WtZrVR18oZlxE09Nll
"""

import pandas as pd
import numpy as np

import warnings
warnings.filterwarnings("ignore")

# data_path = '/content/drive/MyDrive/ESG project dataset/dataset - indicators for comapnies x copy (version 1).xlsx'
data_path = '/content/ESG project dataset (1).xlsx'

df_comp = pd.read_excel(data_path, sheet_name=0)
df_tech = pd.read_excel(data_path, sheet_name=1)

df_comp.head()

df_tech.head()

df_tech.columns

from IPython.display import display


def proc_date(x):
    if not isinstance(x, str):
        return x
    else:
        return int(x[:4])


def proc_q(x):
    if not isinstance(x, str):
        return 0
    else:
        if len(x) > 4:
            # print(x)
            return int(x[5:])
        else:
            return 0


columns = df_tech.keys()

# df_comp = df_comp[columns]
# df_tech = df_tech[df_tech.columns[:-3]]

df_comp['Scope 3'] = (df_comp['Scope 3'] > 0).astype(int)
df_tech['Scope 3'] = (df_tech['Scope 3'] > 0).astype(int)

df_tech.dropna(inplace=True)
df_comp.dropna(inplace=True)

df_comp['Q'] = df_comp['Date'].apply(proc_q)
df_tech['Q'] = df_tech['Date'].apply(proc_q)

df_comp['Date'] = df_comp['Date'].apply(proc_date)
df_tech['Date'] = df_tech['Date'].apply(proc_date)

# df_comp['Date'] -= df_comp['Date'].min()
# df_tech['Date'] -= df_tech['Date'].min()
# df_tech['Date'] = df_tech.index[::-1]
# df_comp['Date'] = df_comp.index[::-1]
# for comp in df_tech['Company'].unique():
#     min_val = df_tech[df_tech['Company'] == comp]['Date'].min()
#     for i, row in df_tech[df_tech['Company'] == comp].iterrows():
#         row['Date'] -= min_val

df_tech

from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Lasso
from sklearn.metrics import r2_score
from IPython.display import display
from sklearn import linear_model
import statsmodels.api as sm

company_df = df_comp
company_df.dropna(inplace=True)
y = company_df['price change ']
X = company_df.drop(columns=['Company', 'price change '])
model = Lasso(alpha=0.0, normalize=True)
model.fit(X, y)
y_pred = model.predict(X)
print(f'r^2: {r2_score(y, y_pred):.4f}')
model.coef_

from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Lasso
from sklearn.metrics import r2_score
from IPython.display import display
from sklearn import linear_model
import statsmodels.api as sm

company_df = df_comp
company_df.dropna(inplace=True)
y = company_df['price change ']
X = company_df.drop(columns=['Company', 'price change '])

X = sm.add_constant(X) # adding a constant
 
model = sm.OLS(y, X).fit()

predictions = model.predict(X) 
 
print_model = model.summary()
print(print_model)

from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Lasso
from sklearn.metrics import r2_score
from IPython.display import display


company_df = df_tech
company_df.dropna(inplace=True)
y = company_df['price change']
X = company_df.drop(columns=['Company', 'price change'])
model = Lasso(alpha=0.0, normalize=True)
model.fit(X, y)
y_pred = model.predict(X)
print(f'r^2: {r2_score(y, y_pred):.4f}')
model.coef_



from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Lasso
from sklearn.metrics import r2_score
from IPython.display import display
from sklearn import linear_model
import statsmodels.api as sm


company_df = df_tech
company_df.dropna(inplace=True)
y = company_df['price change']
X = company_df.drop(columns=['Company', 'price change',])

X = sm.add_constant(X) # adding a constant
 
model = sm.OLS(y, X).fit()

predictions = model.predict(X) 
 
print_model = model.summary()
print(print_model)

from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Lasso
from sklearn.metrics import r2_score
from IPython.display import display


company_df = df_comp
company_df.dropna(inplace=True)
y = company_df['ROA']
X = company_df['Total CO2e emissions (market-based Scope 1 & 2) (Kt)']
model = Lasso(alpha=0.0, normalize=True)
model.fit(X.to_numpy().reshape(-1, 1), y)
y_pred = model.predict(X.to_numpy().reshape(-1, 1))
print(f'r^2: {r2_score(y, y_pred):.4f}')
model.coef_

from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Lasso
from sklearn.metrics import r2_score
from IPython.display import display
from sklearn import linear_model
import statsmodels.api as sm

company_df = df_comp
company_df.dropna(inplace=True)
y = company_df['ROA']
X = company_df.drop(columns=['Company', 'price change ', 'revenue growth rate', 'ROA', 'ROE', 'Net Margin'])

X = sm.add_constant(X) # adding a constant
 
model = sm.OLS(y, X).fit()

predictions = model.predict(X) 
 
print_model = model.summary()
print(print_model)

from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Lasso
from sklearn.metrics import r2_score
from IPython.display import display

company_df = df_tech
company_df.dropna(inplace=True)
y = company_df['ROA']
X = company_df['Total CO2e emissions (market-based Scope 1 & 2) (Kt)']
model = Lasso(alpha=0.0, normalize=True)
model.fit(X.to_numpy().reshape(-1, 1), y)
y_pred = model.predict(X.to_numpy().reshape(-1, 1))
print(f'r^2: {r2_score(y, y_pred):.4f}')
model.coef_

from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Lasso
from sklearn.metrics import r2_score
from IPython.display import display
from sklearn import linear_model
import statsmodels.api as sm

company_df = df_tech
company_df.dropna(inplace=True)
y = company_df['ROA']
X = company_df.drop(columns=['Company', 'price change', 'revenue growth rate', 'ROA', 'ROE', 'Net Margin'])

X = sm.add_constant(X) # adding a constant
 
model = sm.OLS(y, X).fit()

predictions = model.predict(X) 
 
print_model = model.summary()
print(print_model)

from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Lasso
from sklearn.metrics import r2_score
from IPython.display import display

company_df = df_tech
company_df.dropna(inplace=True)
y = company_df['ROE']
X = company_df['Total CO2e emissions (market-based Scope 1 & 2) (Kt)']
model = Lasso(alpha=0.0, normalize=True)
model.fit(X.to_numpy().reshape(-1, 1), y)
y_pred = model.predict(X.to_numpy().reshape(-1, 1))
print(f'r^2: {r2_score(y, y_pred):.4f}')
model.coef_

from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Lasso
from sklearn.metrics import r2_score
from IPython.display import display


company_df = df_tech
company_df.dropna(inplace=True)
y = company_df['ROE']
X = company_df['Total CO2e emissions (market-based Scope 1 & 2) (Kt)']
model = Lasso(alpha=0.0, normalize=True)
model.fit(X.to_numpy().reshape(-1, 1), y)
y_pred = model.predict(X.to_numpy().reshape(-1, 1))
print(f'r^2: {r2_score(y, y_pred):.4f}')
model.coef_

from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Lasso
from sklearn.metrics import r2_score
from IPython.display import display


company_df = df_comp
company_df.dropna(inplace=True)
y = company_df['ROE']
X = company_df['Total CO2e emissions (market-based Scope 1 & 2) (Kt)']
model = Lasso(alpha=0.0, normalize=True)
model.fit(X.to_numpy().reshape(-1, 1), y)
y_pred = model.predict(X.to_numpy().reshape(-1, 1))
print(f'r^2: {r2_score(y, y_pred):.4f}')
model.coef_

from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Lasso
from sklearn.metrics import r2_score
from IPython.display import display


result = {}

for company in df_comp['Company'].unique():
    company_df = df_comp[df_comp['Company'] == company]
    # display(company_df)
    company_df.dropna(inplace=True)
    y = company_df['price change']
    X = company_df.drop(columns=['Company', 'price change'])
    model = Lasso(alpha=0.0, normalize=True)
    model.fit(X, y)
    y_pred = model.predict(X)
    print(f'{company}, r^2: {r2_score(y, y_pred):.4f}')
    result[company] = model.coef_


pd.DataFrame(result, index=X.keys())

df_comp

result = {}

for company in df_comp['Company'].unique():
    company_df = df_comp[df_comp['Company'] == company]
    # company_df.dropna(inplace=True)
    # print(company_df.columns)
    y = company_df['price change']
    X = company_df.drop(columns=['Company', 'price change', 'stock price '])
    model = Lasso(alpha=0, normalize=True)
    model.fit(X, y)
    y_pred = model.predict(X)
    print(f'{company}, r^2: {r2_score(y, y_pred):.4f}')
    result[company] = model.coef_


pd.DataFrame(result, index=X.keys())

result = {}

for company in df_comp['Company'].unique():
    company_df = df_comp[df_comp['Company'] == company]
    company_df.dropna(inplace=True)
    y = company_df['price change']
    X = company_df.drop(columns=['Company', 'price change', 'stock price ', 'revenue growth rate'])
    model = Lasso(alpha=0, normalize=True)
    model.fit(X, y)
    y_pred = model.predict(X)
    print(f'{company}, r^2: {r2_score(y, y_pred):.4f}')
    result[company] = model.coef_


pd.DataFrame(result, index=X.keys())

from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Lasso
from sklearn.metrics import r2_score
from IPython.display import display


result = {}

for company in df_comp['Company'].unique():
    company_df = df_comp[df_comp['Company'] == company]
    # display(company_df)
    company_df.dropna(inplace=True)
    y = company_df['ROA']
    X = company_df['Total CO2e emissions (market-based Scope 1 & 2) (Kt)']
    model = Lasso(alpha=0.0, normalize=True)
    model.fit(X.to_numpy().reshape(-1, 1), y)
    y_pred = model.predict(X.to_numpy().reshape(-1, 1))
    print(f'{company}, r^2: {r2_score(y, y_pred):.4f}')
    result[company] = model.coef_

from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Lasso
from sklearn.metrics import r2_score
from IPython.display import display


result = {}

for company in df_comp['Company'].unique():
    company_df = df_comp[df_comp['Company'] == company]
    # display(company_df)
    company_df.dropna(inplace=True)
    y = company_df['ROE']
    X = company_df['Total CO2e emissions (market-based Scope 1 & 2) (Kt)']
    model = Lasso(alpha=0.0, normalize=True)
    model.fit(X.to_numpy().reshape(-1, 1), y)
    y_pred = model.predict(X.to_numpy().reshape(-1, 1))
    print(f'{company}, r^2: {r2_score(y, y_pred):.4f}')
    result[company] = model.coef_


# pd.DataFrame(result, index=X.keys())

result = {}

for company in df_tech['Company'].unique():
    if not isinstance(company, str):
        continue

    company_df = df_tech[df_tech['Company'] == company]
    company_df.dropna(inplace=True)
    y = company_df['price change in cur']
    X = company_df.drop(columns=['Company', 'price change in cur'])
    model = Lasso(alpha=0.1, normalize=True)
    model.fit(X, y)
    y_pred = model.predict(X)
    print(f'{company}, r^2: {r2_score(y, y_pred):.4f}')
    result[company] = model.coef_


pd.DataFrame(result, index=X.keys())

result = {}

for company in df_tech['Company'].unique():
    if not isinstance(company, str):
        continue

    company_df = df_tech[df_tech['Company'] == company]
    company_df.dropna(inplace=True)
    y = company_df['price change in cur']
    X = company_df.drop(columns=['Company', 'price change in cur', 'stock price in cur'])
    model = Lasso(alpha=0.1, normalize=True)
    model.fit(X, y)
    y_pred = model.predict(X)
    print(f'{company}, r^2: {r2_score(y, y_pred):.4f}')
    result[company] = model.coef_


pd.DataFrame(result, index=X.keys())

result = {}

for company in df_tech['Company'].unique():
    if not isinstance(company, str):
        continue

    company_df = df_tech[df_tech['Company'] == company]
    company_df.dropna(inplace=True)
    y = company_df['price change in cur']
    X = company_df.drop(columns=['Company', 'price change in cur', 'stock price in cur', 'revenue growth rate'])
    model = Lasso(alpha=0.1, normalize=True)
    model.fit(X, y)
    y_pred = model.predict(X)
    print(f'{company}, r^2: {r2_score(y, y_pred):.4f}')
    result[company] = model.coef_


pd.DataFrame(result, index=X.keys())

from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Lasso
from sklearn.metrics import r2_score
from IPython.display import display


result = {}

for company in df_tech['Company'].unique():
    company_df = df_tech[df_tech['Company'] == company]
    # display(company_df)
    company_df.dropna(inplace=True)
    y = company_df['ROA']
    X = company_df['Total CO2e emissions (market-based Scope 1 & 2) (Kt)']
    model = Lasso(alpha=0.0, normalize=True)
    model.fit(X.to_numpy().reshape(-1, 1), y)
    y_pred = model.predict(X.to_numpy().reshape(-1, 1))
    print(f'{company}, r^2: {r2_score(y, y_pred):.4f}')
    result[company] = model.coef_


# pd.DataFrame(result, index=X.keys())

from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Lasso
from sklearn.metrics import r2_score
from IPython.display import display


result = {}

for company in df_tech['Company'].unique():
    company_df = df_tech[df_tech['Company'] == company]
    # display(company_df)
    company_df.dropna(inplace=True)
    y = company_df['ROE']
    X = company_df['Total CO2e emissions (market-based Scope 1 & 2) (Kt)']
    model = Lasso(alpha=0.0, normalize=True)
    model.fit(X.to_numpy().reshape(-1, 1), y)
    y_pred = model.predict(X.to_numpy().reshape(-1, 1))
    print(f'{company}, r^2: {r2_score(y, y_pred):.4f}')
    result[company] = model.coef_


# pd.DataFrame(result, index=X.keys())

import matplotlib.pyplot as plt


p = plt.imshow(df_comp.corr())
plt.colorbar(p)

p = plt.imshow(df_tech.corr())
plt.colorbar(p)

# y_comp = df_comp['price change in cur']
# y_tech = df_tech['price change in cur']

# df_comp.drop(columns=['price change in cur'], inplace=True)
# df_tech.drop(columns=['price change in cur'], inplace=True)